#!/usr/bin/python3.9

#
# animalFarm_02 - A simulation to do 2 things:
#
#   -- Display how to build an interactive "test platform" that can serve as a product's random load
#      and stress test facility.
#
#   -- Showcase the "global data store" (gDS) concept that can be at the center of the test platform.
#
# See the LinkedIn article:
#
#             https://www.linkedin.com/pulse/testing-complex-systems-thomas-alborough
#
# for more background.
#    
# There is help text at the bottom of this file for the user *or* (./animalFarm_02 --help)
#
# Note this is not an OO implementation despite the several "class" citations below. It was also written to
# be able to demo the "test platform" functionality to a live person - it is being refactored to provide a
# cleaner implementation.
#

from past.builtins import execfile

#
# Consume the gDS definition file animalFarm_02.py (you must first use gDSCodeGen on animalFarm_02.dd):
#
#       ./gDSCodeGen animalFarm_02             >>>>>> Produces animalFarm_02.py
#
execfile ('animalFarm_02.py')

from multiprocessing import Process
from threading import Thread
from multiprocessing import Lock

import time
import sys
import select
import random
import getopt

class Color:

    RED = "\u001b[31m"
    GREEN = "\u001b[32m"
    YELLOW = "\u001b[33m"
    BLUE = "\u001b[34m"
    MAGENTA = "\u001b[35m"
    CYAN = "\u001b[36m"
    WHITE = "\u001b[37m"


#
# Control concurrent access to table rows.
#
MasterLockObject = Lock()
#
def MasterLock(operation):
    if operation == "lock":
        MasterLockObject.acquire()
    elif operation == "unlock":
        MasterLockObject.release()
    else:
        x = 1/0                                                 # Dump the call stack on programming error
        
    return
        
#
# The UI class houses code that gives the UI its look and feel, that starts a run "on its way", that
# monitors the run's progress, and that services interactive operation.
#
class UI:

    # Help the user remember where they are
    lastCommand = "<none>"

    # The currently displaying screen
    displayName = "farmSummary"
    
    # The background process objects
    backgroundProcs = []
    
    # The count of the 4 possible background actions
    tcCount = 0
    rcCount = 0
    txCount = 0
    rxCount = 0
    
    # Test run attributes
    runTime = 0
    cycleTime = 0

    #
    # Create counties and farms and a starting set of animals. Randomize creation order using spawned processes/threads.
    # County names are unique; farm names are unique within counties; animal names unique within farms.
    #
    def setUp():

        # Start in interactive mode
        gStartTime[0] = time.time()
        gInteractive[0] = True
    
        # A local routine, called many times, to make one animal on the given farm
        def makeAnAnimal(farmIndex, animalNumber, animalType):

            # This gets all executors running at random times over a 2 to 4 second interval
            time.sleep(random.uniform(2.0, 4.0))
    
            # The makes a row atomically
            animalIndex = gAnimal_AddARowUnderLock(_gFarm_Index = farmIndex, _Name = "%s #%2.2d" % (animalType, animalNumber + 1), \
                                                   _Type = animalType, _RowStatus = "")
            print (f"Added {gAnimal_Name[animalIndex]} to {gFarm_Name[farmIndex]} in {gCounty_Name[gFarm_gCounty_Index[farmIndex]]}")
            
            # Let's track this number atomically
            MasterLock("lock")
            gTotalAnimalsCalculated[0] += 1
            MasterLock("unlock")
            
            return
            
        # Make a farm then all the animals in it
        def makeAFarm(countyIndex, farmNumber):

            # This gets all executors running at random times over a 0 to 3 second interval
            time.sleep(random.uniform(0.0, 3.0))
    
            farmIndex = gFarm_AddARowUnderLock(_gCounty_Index = countyIndex, _Name = "Farm #%2.2d" % (farmNumber + 1), \
                                               _RowStatus = "")
            print (f"Added {gFarm_Name[farmIndex]} in {gCounty_Name[countyIndex]}")
            
            threads = []
            
            for animalNumber in range(3):
                threads.append(Thread(target = makeAnAnimal, args = (farmIndex, animalNumber, "Cow")))
                threads[-1].start()
                
            for animalNumber in range(3):
                threads.append(Thread(target = makeAnAnimal, args = (farmIndex, animalNumber, "Chicken")))
                threads[-1].start()
                
            for thread in threads:
                thread.join()
                
            return
            
        # Make some counties then the farms in it
        def makeACounty(countyNumber):

            # This gets all executors running at random times over a 0 to 3 second interval
            time.sleep(random.uniform(0.0, 3.0))
    
            countyIndex = gCounty_AddARowUnderLock(_Name = "County #%2.2d" % (countyNumber + 1), _RowStatus = "")
            print (f"Added {gCounty_Name[countyIndex]}")
            
            threads = []
            
            for farmNumber in range(3):
                threads.append(Thread(target = makeAFarm, args = (countyIndex, farmNumber)))
                threads[-1].start()
                
            for thread in threads:
                thread.join()
                
            return

        processes = []
        
        for countyNumber in range(3):
            processes.append(Process(target = makeACounty, args = (countyNumber, )))
            processes[-1].start()
            
        for process in processes:
            process.join()
            
        gTotalAnimalsObserved[0] = len(gAnimal_RowStatus)
        
        return

    # One of the 2 main displays - by farm
    def displayFarmSummary():
    
        #
        # The challenge here is to produce a sorted display of items that have non-unique names for things
        #
        
        print ("")
        print ("                                   Cow  Chx  Busy   Milk   Eggs  Milk   Eggs ")
        print ("      County            Farm       Cnt  Cnt         Now    Now   Total  Total")
        print ("      ======            ====       ===  ===  ====   ====   ====  =====  =====")
        print ("")
        
        # Go by counties - prepare a dict of county names
        countyName2Index = {}
        for (countyIndex, countyName) in enumerate(gCounty_Name):
            countyName2Index[countyName] = countyIndex
            
        for (countyName, countyIndex) in sorted(countyName2Index.items()):

            # Go by farms (in counties) - prepare a dict of farm names in this county
            farmName2Index = {}
            for (farmIndex, farmName) in enumerate(gFarm_Name):
                if gFarm_gCounty_Index[farmIndex] == countyIndex:
                    farmName2Index[farmName] = farmIndex
            
            for (farmName, farmIndex) in sorted(farmName2Index.items()):
                    
                # Go by animals (in farms)
                
                cowCount = 0
                chickenCount = 0
                inProcessingCount = 0
                
                milkPumped = 0
                eggsGathered = 0
                
                # For each un-erased animal on this farm
                for (animalIndex, animalFarmIndex) in enumerate(gAnimal_gFarm_Index):
                
                    if (animalFarmIndex == farmIndex) and (gAnimal_RowStatus[animalIndex] is not None):
                    
                        if gAnimal_Type[animalIndex] == "Cow":
                            cowCount += 1
                            milkPumped += gAnimal_Produced[animalIndex]
                        
                        if gAnimal_Type[animalIndex] == "Chicken":
                            chickenCount += 1
                            eggsGathered += gAnimal_Produced[animalIndex]
                            
                        if gAnimal_RowStatus[animalIndex] != "":
                            inProcessingCount += 1

                x = y = Color.WHITE
                if inProcessingCount:
                    x = Color.RED
                    
                print (" %15s %15s  %4d %4d  %s%4d%s %6d %6d %6d %6d" % (countyName, gFarm_Name[farmIndex], cowCount, chickenCount, \
                                                               x, inProcessingCount, y, milkPumped, eggsGathered, \
                                                               gFarm_MilkTotal[farmIndex], gFarm_EggsTotal[farmIndex]))
                                                               
                countyName = ""
                
        return

    # The other display - a single character per animal ("c" or "x"), colored by animal status
    def displayAnimalDetail():
    
        out = ""
        print ("")
    
        for (animalIndex, animalRowStatus) in enumerate(gAnimal_RowStatus):
        
            animal = "c"
            if gAnimal_Type[animalIndex] == "Chicken":
                animal = "x"
                
            x = Color.WHITE
            if animalRowStatus is None:
                x = Color.CYAN
            elif animalRowStatus != "":
                x = Color.RED
            
            out += x + animal + " "
            
            if len(out) > 100:
                print (" ", out)
                out = ""
                
        print (" ", out, Color.WHITE)
        
        print ("")
        print (" (c) = Cows; (x) = Chickens")
        print (f" White = not active; {Color.RED}Red = active; {Color.CYAN}Cyan = erased (to be compressed){Color.WHITE}")
        
        return

    # Several routines to ask the user how many background processes to run doing tending / raising work
    def getTCCount():

        print ("")
        aCount = input(" Enter number of parallel cow-tending activities [def = 3]: ")
        
        if aCount == "":
            aCount = 3
        aCount = int(aCount)
        
        return (aCount)            


    def getRCCount():

        print ("")
        aCount = input(" Enter number of parallel cow-raising activities [def = 3]: ")
        
        if aCount == "":
            aCount = 3
        aCount = int(aCount)
        
        return (aCount)            


    def getTXCount():

        print ("")
        aCount = input(" Enter number of parallel chicken-tending activities [def = 3]: ")
        
        if aCount == "":
            aCount = 3
        aCount = int(aCount)
        
        return (aCount)            


    def getRXCount():

        print ("")
        aCount = input(" Enter number of parallel chicken-raising activities [def = 3]: ")
        
        if aCount == "":
            aCount = 3
        aCount = int(aCount)
        
        return (aCount)            


    # Several routines to start up background work
    def startTCs(aCount, startUp = False):
    
        for i in range(aCount):
            UI.backgroundProcs.append(Process(target = Background.tendCow, args = ()))
            if startUp:
                UI.backgroundProcs[-1].start()
                
        return


    def startRCs(aCount, startUp = False):
    
        for i in range(aCount):
            UI.backgroundProcs.append(Process(target = Background.raiseCow, args = ()))
            if startUp:
                UI.backgroundProcs[-1].start()
                
        return


    def startTXs(aCount, startUp = False):
                            
        for i in range(aCount):
            UI.backgroundProcs.append(Process(target = Background.tendChicken, args = ()))
            if startUp:
                UI.backgroundProcs[-1].start()
                
        return


    def startRXs(aCount, startUp = False):
                            
        for i in range(aCount):
            UI.backgroundProcs.append(Process(target = Background.raiseChicken, args = ()))
            if startUp:
                UI.backgroundProcs[-1].start()
                
        return


    # Get rid of erased animals (the routine is in the gDS .py)
    def compressAnimals():
    
        gAnimal_Compress()

        return
        
        
    # Add observed values from each farm's total production
    def updateObserved():
                
        # Get animal counts (beware compression!!)
        gTotalAnimalsObserved[0] = len(gAnimal_RowStatus)
        
        # Get total observed counts from all per-farm counts
        gTotalMilkObserved[0] = 0
        gTotalEggsObserved[0] = 0
        
        for farmIndex in range(len(gFarm_RowStatus)):
            gTotalMilkObserved[0] += gFarm_MilkTotal[farmIndex]
            gTotalEggsObserved[0] += gFarm_EggsTotal[farmIndex]
            
        return


    # Display calculated and observed values
    def printCalculatedAndObserved():
    
        x = Color.RED
        y = Color.WHITE
    
        print ("")
        print (f" {x}{gTotalAnimalsCalculated[0]}{y} animals calculated; {x}{gTotalAnimalsObserved[0]}{y} animals observed")
        print (f" {x}{gTotalMilkCalculated[0]}{y} milk production calculated; {x}{gTotalMilkObserved[0]}{y} milk production observed")
        print (f" {x}{gTotalEggsCalculated[0]}{y} egg production calculated; {x}{gTotalEggsObserved[0]}{y} egg production observed")
       
        return
      
      
    # Add "now" animal values to "total" farm values and zero animal values
    def updateProduction():
    
        for (animalIndex, animalType) in enumerate(gAnimal_Type):
            if animalType == "Cow":
                gFarm_MilkTotal[gAnimal_gFarm_Index[animalIndex]] += gAnimal_Produced[animalIndex]
            elif animalType == "Chicken":
                gFarm_EggsTotal[gAnimal_gFarm_Index[animalIndex]] += gAnimal_Produced[animalIndex]
            gAnimal_Produced[animalIndex] = 0
            
        return

    # Do all the necessary to update and verify the calculated / observed values
    # Check for running background activity BEFORE calling
    def verifyAll():
    
        # MUST update totals (using possible erased animals) BEFORE compressing them away
        print ("")
        print (" Process before verification:")
        print ("")
        print ("   1) Update 'total' farm production values with 'now' values from both active and erased animals")
        UI.updateProduction()

        print ("   2) Compress out erased animals")
        UI.compressAnimals()

        print ("   3) Update observed production counts with new production counts from the farms")
        UI.updateObserved()
        
        UI.printCalculatedAndObserved()

        print ("")
        print (" Verify totals above!")
        if gTotalAnimalsCalculated[0] != gTotalAnimalsObserved[0] or \
           gTotalMilkCalculated[0] != gTotalMilkObserved[0] or \
           gTotalEggsCalculated[0] != gTotalEggsObserved[0]:

            print ("")
            print (f" {Color.RED}The counts above don't match!!!{Color.WHITE}")
            exit (1)
            
        print ("")
        print (f" {Color.CYAN}The counts above match!!!{Color.WHITE}")
                
        return

    # Used in many places to ensure we don't step on running background activities
    def someBackgroundAlive():
        
        aliveCount = 0
        for process in UI.backgroundProcs:
            if process.is_alive():
                aliveCount += 1
        return (aliveCount)


    # Process user input
    def processCommand(command):
    
        # Process "start a test run" command
        if command == "st":
        
            if (not gInteractive[0]) or UI.someBackgroundAlive():
                print ("")
                print (f"A test run / some background activities are already in progress - you must stop them first (eb)")
                time.sleep(3)
            else:
            
            
                UI.tcCount = 0
                UI.rcCount = 0
                UI.txCount = 0
                UI.rxCount = 0
                
                gInteractive[0] = False
                
                UI.tcCount = UI.getTCCount()
                UI.rcCount = UI.getRCCount()
                UI.txCount = UI.getTXCount()
                UI.rxCount = UI.getRXCount()
                
                print ("")
                aCount = input(" Enter the run time in seconds [def = 45]: ")
    
                if aCount == "":
                    aCount = 45
                UI.runTime =  int(aCount)
    
                print ("")
                aCount = input(" Enter the cycle time in seconds [def = 15]: ")
    
                if aCount == "":
                    aCount = 15
                UI.cycleTime =  int(aCount)
                
                gRunStopTime[0] = time.time() + UI.runTime
                
                UI.startACycle()
        
        # Verify all
        elif command == "va":
            if (not gInteractive[0]) or UI.someBackgroundAlive():
                print ("")
                print ("A test run / some background activities are already in progress - you must stop them first (eb)")
                time.sleep(3)
            else:
                UI.verifyAll()
                time.sleep(3)
            
        # Inject one & two of two errors (note #2 might not trigger a failure on any given attempt)
        elif command == "e1":
            gAnimal_Produced[0] += 1

        elif command == "e2":
            gAnimal_RowStatus[0] = None

        # Set one of two displays
        elif command == "ad":
            UI.displayName = "animalDetail"
            
        elif command == "fs":
            UI.displayName = "farmSummary"
            
        # Tend cow, tend chicken etc.
        elif gInteractive[0] and command == "tc":
        
            gStopBackgroundProcs[0] = False

            aCount = UI.getTCCount()
            UI.tcCount += aCount
            UI.startTCs(aCount = aCount, startUp = True)

        elif gInteractive[0] and command == "tx":
        
            gStopBackgroundProcs[0] = False
            
            aCount = UI.getTXCount()
            UI.txCount += aCount
            UI.startTXs(aCount = aCount, startUp = True)

        elif gInteractive[0] and command == "rc":
        
            gStopBackgroundProcs[0] = False

            aCount = UI.getRCCount()
            UI.rcCount += aCount
            UI.startRCs(aCount = aCount, startUp = True)

        elif gInteractive[0] and command == "rx":
        
            gStopBackgroundProcs[0] = False

            aCount = UI.getRXCount()
            UI.rxCount += aCount
            UI.startRXs(aCount = aCount, startUp = True)

        # End any background work going on
        elif command == "eb":
        
            gRunStopTime[0] = 0
            gCycleStopTime[0] = 0
            gStopBackgroundProcs[0] = True
            
            UI.tcCount = 0
            UI.rcCount = 0
            UI.txCount = 0
            UI.rxCount = 0
            
        # Do a few things by hand for interactive users
        # Update farm production figures from animals' (should use erased animals' data first)
        elif command == "up":
        
            if (not gInteractive[0]) or UI.someBackgroundAlive():
                print ("")
                print (f"A test run / some background activities are in progress - you must stop them first (eb)")
                time.sleep(3)
            else:
                UI.updateProduction()
            
        # Compress out erased animals rows
        elif command == "ca":
        
            if (not gInteractive[0]) or UI.someBackgroundAlive():
                print ("")
                print (f"A test run / some background activities are in progress - you must stop them first (eb)")
                time.sleep(3)
            else:
                UI.compressAnimals()
            
        # Dump tables
        elif command == "dc":
            gCounty_DumpTable()
            print ("")
            input (" Hit Enter to continue: ")
            
        elif command == "df":
            gFarm_DumpTable()
            print ("")
            input (" Hit Enter to continue: ")
            
        elif command == "da":
            gAnimal_DumpTable()
            print ("")
            input (" Hit Enter to continue: ")
            
        else:
            UI.lastCommand = ""
            print ("")
            print (f"Invalid or not currently executable command: '{command}'")
            time.sleep(2)

        return


    # Service the updating of the terminal screen
    def serviceTerminal():
    
        # Figure color of background count (most non-zero values go red here)
        x = y = Color.WHITE
        if UI.someBackgroundAlive():
            x = Color.RED

        # Line 1 of header
        print ("\033[H\033[J")
        print (" Uptime in seconds = %d; Background process count = %s%d%s" % \
              (time.time() - gStartTime[0], x, UI.someBackgroundAlive(), y))

        # Line 2 of header
        # Figure color of speced background process counts
        x1 = x2 = x3 = x4 = x5 = x6 = y = Color.WHITE
        if UI.tcCount:
            x1 = Color.RED
        if UI.rcCount:
            x2 = Color.RED
        if UI.txCount:
            x3 = Color.RED
        if UI.rxCount:
            x4 = Color.RED

        print (f" Background composition: Tend cow = {x1}{UI.tcCount}{y}; Raise cow = {x2}{UI.rcCount}{y}; Tend chicken = {x3}{UI.txCount}{y}; Raise chicken = {x4}{UI.rxCount}{y}")

        # Line 3 of header
        x = Color.RED
        y = Color.WHITE
        # If running background down in "test run" mode
        if not gInteractive[0] and (gRunStopTime[0] == 0):
            print (f" {x}Test run rundown{y}")
        # If interactive
        elif gInteractive[0] or (gRunStopTime[0] == 0):
            print (f" {x}Interactive operation{y}")
        # Must be "test run" mode
        else:
            if {int(gCycleStopTime[0] - time.time()) > 0}:
                x5 = Color.RED
            if {int(gRunStopTime[0] - time.time()) > 0}:
                x6 = Color.RED
            batch = ""
            if gBatch[0]:
                batch = "Batch mode! "
            print (f" {x}{batch}Test run{y} time left: {x6}{int(gRunStopTime[0] - time.time())}{y}; Test cycle time left: {x5}{int(gCycleStopTime[0] - time.time())}{y}")

        # So we lock here. A hot lock will hang the display for some amount of time
        MasterLock("lock")

        # Decide what display to show
        if UI.displayName == "farmSummary":
            UI.displayFarmSummary()
        elif UI.displayName == "animalDetail":
            UI.displayAnimalDetail()
            
        # Print calculated and observed counts and menus if not batch
        if not gBatch[0]:
        
            print ("")
            print (" ======================================")
            print ("")
            print (" The 3 lines below are only accurate after ((up) and (ca)) or (va) operations!")
            #  Update observed now because it's cheap
            UI.updateObserved()
            UI.printCalculatedAndObserved()
            
            # Update menu
            print ("")
            print (" (fs / ad) = Display farm summary; display animal detail")
            print (" (dc / df / da) = Dump counties / farms / animals")
            print (" (st / eb) = Start a test run; End all (background/test run) processing")
            
            if gInteractive[0]:
                print ("")
                print (" (tc / tx / rc / rx) = tend cows, chickens / raise cows, chickens")
                print (" (up / ca / va) = Update farm production tables; Compress the gAnimal table; Verify all")

            print (" (e1 / e2 = Inject errors during a test run")
            print ("")
            print (" ======================================")
            print ("")
            print (f" Last command = '{UI.lastCommand}'")
    
        # The display is up so stand down
        MasterLock("unlock")
        
        # Handle batch by starting a test run with the pre-stored command line arg values
        if gBatch[0] and (gRunStopTime[0] == 0):
        
            gRunStopTime[0] = time.time() + UI.runTime
            UI.startACycle()
            gInteractive[0] = False
            
        # More time in batch - just sleep 3 seconds per screen update
        elif gBatch[0]:
        
            time.sleep(3)
            
        # Else, interactive
        elif not gBatch[0]:

            print ("")
            print (" Type a 2-letter command from the menu above then hit Enter: ")

            # Get any user input
            i, o, e = select.select([sys.stdin], [], [], 3)
            
            # If some input
            if i:
            
                command = sys.stdin.readline().strip()
                
                UI.lastCommand = command

                # Process user input
                UI.processCommand(command)

        return
        

    # Start / continue cycles
    def startACycle():
    
        # Set so started background tasks can/do run
        gCycleStopTime[0] = time.time() + UI.cycleTime
        gStopBackgroundProcs[0] = False
        UI.backgroundProcs = []

        UI.startTCs(aCount = UI.tcCount, startUp = True)
        UI.startRCs(aCount = UI.rcCount, startUp = True)
        UI.startTXs(aCount = UI.txCount, startUp = True)
        UI.startRXs(aCount = UI.rxCount, startUp = True)

        return
        

    def getBatchArgs():
    
        try:
            opts, args = getopt.getopt(sys.argv[1:], "h", ["help",
                                                           "rt=",
                                                           "ct=",
                                                           "tc=",
                                                           "tx=",
                                                           "rc=",
                                                           "rx="])
        except getopt.GetoptError as err:
            print(err)
            print (getCodeLines("Help"))
            sys.exit(2)

        for i in range(0, len(opts)):
            if opts[i] in ("-h", "--help"):
                print (getCodeLines("Help"))
                exit(0)

            elif opts[i][0] == ("--rt"):
                UI.runTime = int(opts[i][1])

            elif opts[i][0] == ("--ct"):
                UI.cycleTime = int(opts[i][1])

            elif opts[i][0] == ("--tc"):
                UI.tcCount = int(opts[i][1])

            elif opts[i][0] == ("--tx"):
                UI.txCount = int(opts[i][1])

            elif opts[i][0] == ("--rc"):
                UI.rcCount = int(opts[i][1])

            elif opts[i][0] == ("--rx"):
                UI.rxCount = int(opts[i][1])

            else:
                print (getCodeLines("Help"))
                sys.exit(0)

        return


    # Watch what's going on from displays rendered on terminals (only the main terminal in coded for now)
    def coreTerminalLogic():
    
        # Always update the screen
        while True:

            # While interactive or in a run / cycle
            while gInteractive[0] or UI.someBackgroundAlive():
            
                # Post stop background if in a cycle and time to stop cycle
                if not gInteractive[0]:
                    if time.time() > gCycleStopTime[0]:
                        gStopBackgroundProcs[0] = True

                # Update screen and process any user input
                UI.serviceTerminal()

            # If running test cycles and done running background - it's end of cycle
            if (not gInteractive[0]) and (not UI.someBackgroundAlive()):

                UI.verifyAll()
                time.sleep(3)
            
                # If more cycles to run start them else back to interactive or end of batch
                if time.time() < gRunStopTime[0]:
                    UI.startACycle()
                else:
                    gInteractive[0] = True
                    UI.tcCount = 0
                    UI.rcCount = 0
                    UI.txCount = 0
                    UI.rxCount = 0
                    
                    # If end of batch run
                    if gBatch[0] and gInteractive[0]:
                        print ("")
                        print (" Done!")
                        exit (0)

        # End of run processing goes here

# Background workers
class Background:


    # Get any animal of the given type with RowStatus = ""
    def allocateAnAnimal(animalType, rowStatus):
    
        animalIndex = None
    
        while (not gStopBackgroundProcs[0]) and (animalIndex is None):
        
            time.sleep(0.2)

            MasterLock("lock")

            i = random.randrange(0, len(gAnimal_RowStatus))
            
            if (gAnimal_Type[i] == animalType) and (gAnimal_RowStatus[i] == ""):
                gAnimal_RowStatus[i] = rowStatus
                animalIndex = i

            MasterLock("unlock")

        return (animalIndex)

        
    # Milk the cow...
    def tendCow():
    
        while not gStopBackgroundProcs[0]:

            animalIndex = Background.allocateAnAnimal("Cow", "Tending")
            
            if animalIndex is not None:
            
                j = int(random.uniform(20.0, 40.0))
                gAnimal_Produced[animalIndex] += j
                
                MasterLock("lock")
                gTotalMilkCalculated[0] += j
                MasterLock("unlock")
                
                time.sleep(3)

                gAnimal_RowStatus[animalIndex] = ""

            time.sleep(1)
            
        return


    # Create / erase a cow (net ~70/30)
    def raiseCow():
    
        while not gStopBackgroundProcs[0]:
        
            animalIndex = Background.allocateAnAnimal("Cow", "Raising")
            
            if animalIndex is not None:
            
                # If to create a cow
                if random.randrange(0, 10) > 3:
                    gAnimal_AddARowUnderLock(_Type = "Cow", _Name = f"Cow #{time.time()}", \
                                             _gFarm_Index = gAnimal_gFarm_Index[animalIndex], _RowStatus = "")
                    time.sleep(3)
                    gAnimal_RowStatus[animalIndex] = ""
                    j = +1
                else:
                    gAnimal_RowStatus[animalIndex] = None
                    j = -1
                    
                MasterLock("lock")
                gTotalAnimalsCalculated[0] += j
                MasterLock("unlock")

            time.sleep(1)
            
        return


    # Gather chicken eggs
    def tendChicken():
    
        while not gStopBackgroundProcs[0]:
        
            animalIndex = Background.allocateAnAnimal("Chicken", "Tending")
            
            if animalIndex is not None:
            
                j = int(random.uniform(1.0, 2.0))
                gAnimal_Produced[animalIndex] += j
                
                MasterLock("lock")
                gTotalEggsCalculated[0] += j
                MasterLock("unlock")
                
                time.sleep(3)

                gAnimal_RowStatus[animalIndex] = ""

            time.sleep(1)
            
        return


    # Create / erase a chicken (net ~70/30)
    def raiseChicken():
    
        while not gStopBackgroundProcs[0]:
        
            animalIndex = Background.allocateAnAnimal("Chicken", "Raising")
            
            if animalIndex is not None:
            
                # If to create a chicken
                if random.randrange(0, 10) > 3:
                    gAnimal_AddARowUnderLock(_Type = "Chicken", _Name = f"Chicken #{time.time()}", \
                                             _gFarm_Index = gAnimal_gFarm_Index[animalIndex], _RowStatus = "")
                    time.sleep(3)
                    gAnimal_RowStatus[animalIndex] = ""
                    j = +1
                else:
                    gAnimal_RowStatus[animalIndex] = None
                    j = -1

                MasterLock("lock")
                gTotalAnimalsCalculated[0] += j
                MasterLock("unlock")

            time.sleep(1)
            
        return
        
        
#
# Routine to handle in-line documentation/text (text in this source file
#     can be extracted at run time and used for help or templates)
#
def getCodeLines(tag, substitutionList = []):

    lineIndex = 0
    harvestingText = False
    harvestedText = ''
    
    while lineIndex <= len(CodeLines):
    
        line = CodeLines[lineIndex]
        lineIndex += 1

        if (not harvestingText) and ('""" - ' in line):
            indent = line.find('"""')
            line = line[indent:]
            line = line.replace('""" - ', "")
            if line == tag:
                harvestingText = True
                
        elif (not harvestingText) and (lineIndex == len(CodeLines)):
            print ("Can not find in-line text tag '%s'" % (tag))
            x = 1/0

        elif harvestingText and ('"""' in line):
            return (harvestedText % (substitutionList))
            
        elif harvestingText:
            harvestedText += line[indent:] + "\n"


if __name__ == "__main__":

    # Load in this program's code for in-line text processing
    CodeLines = open(sys.argv[0], "r").read().splitlines()
    
    # Handle batch mode
    gBatch[0] = False
    if len(sys.argv) > 1:
        UI.getBatchArgs()
        gBatch[0] = True

    # Start with this display on the screen
    displayName = "farmSummary"
    
    print ("")
    print ("Create some items to work with in random order over the next 10 seconds or so...")
    print ("")
    time.sleep(1)
    
    UI.setUp()
    
    print ("")
    if gBatch[0]:
        print ("Start screen refresh / batch execution mode...")
    else:
        print ("Start screen refresh / interactive command input mode...")
    print ("")    
    time.sleep(2)

    # Start the endless cycle running
    UI.coreTerminalLogic()


""" - Help

####################
#
# animalFarm_02 - Help
#
####################
#
animalFarm_02 (this file) is a part of the "gDS" capability / GitHub repo. gDS provides a very light-weight "data store" 
feature to Python programs. See the repo README for more on gDS. This -help- covers how this example program works.


For more background see: "https://www.linkedin.com/pulse/testing-complex-systems-thomas-alborough"


This program serves 2 purposes (as described in LinkedIn article):

    -- It demonstraits a use of gDS.
    
    -- It demonstraits one way to provide an "interactive test platform".


animalFarm_02 starts by populating a gDS data store first with farms then animals in the farms (cows and chickens). The 
user can then start independent background processes that "tend" and "raise" the animals:

    -- "tend" - The animals are looked after (cows milked; chickens have their eggs gathered).
    
    -- "raise" - New animals are cloned from existing animals or existing animals are "sent to market" (their data store 
       rows "erased").

       
The test run executes for a certain amount of time (run time) and it stops and reconciles (checks the data) every so many 
seconds (cycle time). Both times are user specified.


The milk and eggs are gathered and tracked (two ways) and if the two counts don't match at the end of a cycle, the 
program exits with an error. The animal count and production values are tracked as:

    -- Calculated - An overall totalizer is adjusted each time the item is created or deleted by a background activities.
    
    -- Observed -- The amounts are calculated from separate farm totalizer values.


animalFarm_02 runs in one of 2 operating modes:

    -- Interactively - Here the user has a menu that gives them full control over what the program does. The display 
       is updated every 3 seconds.
       
            -- In interactive mode a menu allows the user to start and stop individual activities OR ...
            
            -- make a "test run" where the specified activities are run over and over (cycles) for a given total
               time (run time).
       
    -- Command line / batch - Here command line args trigger batch mode operation and specify a single run of the code. 
       For now the screen is updated every 3 seconds in batch mode just so the user can keep an eye on it, but the user has 
       no control over the run once the run starts.

       
The various menu items (interactive as menu selections / batch as CLI arguments (**) "--xx=nn") are:

    fs / ad - Set farm summary / animal detail displays

    rt - Set total run time in seconds (**)
    
    ct - Set the cycle time in seconds (**)
    
    tc, tx, rc, rx - tend / raise animal background process count (**)
    
    up - As the simulation run *animals* collect milk and eggs. When the background processes are stopped, the "up" 
         command add the *animal* production values to the *farm* totals and then the animals values get zeroed (this 
         allows "erased" animals to then be compressed out).
         
    ca - This compresses out any erased animals.
    
    va - This does the above 2 operations and then verifies the "calculated" and "observed" values match (see above).

    st - Start a test run (like batch but the screen and input stays "live").
    
    eb - End all background processes
    
    e1 / e2 - Inject two kinds of errors to trip up verification

"""